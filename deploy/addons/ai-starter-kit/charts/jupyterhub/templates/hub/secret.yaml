---
# Source: ai-starter-kit/charts/jupyterhub/templates/hub/secret.yaml
kind: Secret
apiVersion: v1
metadata:
  name: ai-starter-kit-jupyterhub-hub
  labels:
    component: hub
    app.kubernetes.io/component: hub
    app: "jupyterhub"
    release: "ai-starter-kit"
    chart: jupyterhub-4.2.0
    heritage: Helm
    app.kubernetes.io/name: "jupyterhub"
    app.kubernetes.io/instance: "ai-starter-kit"
    helm.sh/chart: jupyterhub-4.2.0
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  values.yaml: ""

  # Any JupyterHub Services api_tokens are exposed in this k8s Secret as a
  # convinience for external services running in the k8s cluster that could
  # mount them directly from this k8s Secret.

  # During Helm template rendering, these values that can be autogenerated for
  # users are set using the following logic:
  #
  # 1. Use chart configuration's value
  # 2. Use k8s Secret's value
  # 3. Use a new autogenerated value
  #
  # hub.config.ConfigurableHTTPProxy.auth_token: for hub to proxy-api authorization (JupyterHub.proxy_auth_token is deprecated)
  # hub.config.JupyterHub.cookie_secret:         for cookie encryption
  # hub.config.CryptKeeper.keys:                 for auth state encryption
  #
  hub.config.ConfigurableHTTPProxy.auth_token: "SFFIamxOOUxnbGxkTktNWkhJWndxNW1QM0RkWk01c1ZUbE9QT0ZhNERYT0NHbTlhem85c0RzS0sxU1BoZlc2cw=="
  hub.config.JupyterHub.cookie_secret: "YjYwODI3ODNkMTU4ODEwOWI2ZTM3MjZjZWMxNTg2YjE0M2QzOWMwZmU0MDJiNzQwNTcxMTU1ZmEzZGE1MThiNw=="
  hub.config.CryptKeeper.keys: "ZTQxMzI3OTE3ODMwNjljZGU4NTVmNmIyNDgwN2ZhNWYyZDUyMzI4ZWJhZTE5MTIzNDk4MTc1YzExODE3N2E1OQ=="
